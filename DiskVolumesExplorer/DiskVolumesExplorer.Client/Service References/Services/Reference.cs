//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DiskVolumesExplorer.Client.Services {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DriveData", Namespace="http://schemas.datacontract.org/2004/07/DiskVolumesExplorer.Service.Data")]
    [System.SerializableAttribute()]
    public partial class DriveData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ulong SizeInBytesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DiskVolumesExplorer.Client.Services.VolumeData[] VolumesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ulong SizeInBytes {
            get {
                return this.SizeInBytesField;
            }
            set {
                if ((this.SizeInBytesField.Equals(value) != true)) {
                    this.SizeInBytesField = value;
                    this.RaisePropertyChanged("SizeInBytes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Status {
            get {
                return this.StatusField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusField, value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DiskVolumesExplorer.Client.Services.VolumeData[] Volumes {
            get {
                return this.VolumesField;
            }
            set {
                if ((object.ReferenceEquals(this.VolumesField, value) != true)) {
                    this.VolumesField = value;
                    this.RaisePropertyChanged("Volumes");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VolumeData", Namespace="http://schemas.datacontract.org/2004/07/DiskVolumesExplorer.Service.Data")]
    [System.SerializableAttribute()]
    public partial class VolumeData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ulong CapacityInBytesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileSystemField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ulong FreeSpaceInBytesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ulong CapacityInBytes {
            get {
                return this.CapacityInBytesField;
            }
            set {
                if ((this.CapacityInBytesField.Equals(value) != true)) {
                    this.CapacityInBytesField = value;
                    this.RaisePropertyChanged("CapacityInBytes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileSystem {
            get {
                return this.FileSystemField;
            }
            set {
                if ((object.ReferenceEquals(this.FileSystemField, value) != true)) {
                    this.FileSystemField = value;
                    this.RaisePropertyChanged("FileSystem");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ulong FreeSpaceInBytes {
            get {
                return this.FreeSpaceInBytesField;
            }
            set {
                if ((this.FreeSpaceInBytesField.Equals(value) != true)) {
                    this.FreeSpaceInBytesField = value;
                    this.RaisePropertyChanged("FreeSpaceInBytes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Status {
            get {
                return this.StatusField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusField, value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Services.IHypervisorService")]
    public interface IHypervisorService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHypervisorService/GetVirtualMachines", ReplyAction="http://tempuri.org/IHypervisorService/GetVirtualMachinesResponse")]
        string[] GetVirtualMachines();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHypervisorService/GetVirtualMachines", ReplyAction="http://tempuri.org/IHypervisorService/GetVirtualMachinesResponse")]
        System.Threading.Tasks.Task<string[]> GetVirtualMachinesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHypervisorService/GetDrives", ReplyAction="http://tempuri.org/IHypervisorService/GetDrivesResponse")]
        DiskVolumesExplorer.Client.Services.DriveData[] GetDrives(string vmName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHypervisorService/GetDrives", ReplyAction="http://tempuri.org/IHypervisorService/GetDrivesResponse")]
        System.Threading.Tasks.Task<DiskVolumesExplorer.Client.Services.DriveData[]> GetDrivesAsync(string vmName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IHypervisorServiceChannel : DiskVolumesExplorer.Client.Services.IHypervisorService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class HypervisorServiceClient : System.ServiceModel.ClientBase<DiskVolumesExplorer.Client.Services.IHypervisorService>, DiskVolumesExplorer.Client.Services.IHypervisorService {
        
        public HypervisorServiceClient() {
        }
        
        public HypervisorServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public HypervisorServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public HypervisorServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public HypervisorServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string[] GetVirtualMachines() {
            return base.Channel.GetVirtualMachines();
        }
        
        public System.Threading.Tasks.Task<string[]> GetVirtualMachinesAsync() {
            return base.Channel.GetVirtualMachinesAsync();
        }
        
        public DiskVolumesExplorer.Client.Services.DriveData[] GetDrives(string vmName) {
            return base.Channel.GetDrives(vmName);
        }
        
        public System.Threading.Tasks.Task<DiskVolumesExplorer.Client.Services.DriveData[]> GetDrivesAsync(string vmName) {
            return base.Channel.GetDrivesAsync(vmName);
        }
    }
}
